---
apiVersion: v1
kind: Secret
metadata:
  name: "mysql-secrets"
  labels:
    name: mysql-secrets
    template: dh-data-catalog
    app: hue
  annotations:
    template.openshift.io/expose-username: "{.data['database-user']}"
    template.openshift.io/expose-password: "{.data['database-password']}"
    template.openshift.io/expose-database_name: "{.data['database-name']}"
    template.openshift.io/expose-root_password: "{.data['database-root-password']}"
stringData:
  database-user: "datacatalog"
  database-password: "datacatalog"
  database-name: "datacatalog"
  database-root-password: "root"
---
apiVersion: v1
kind: Secret
metadata:
  name: hue-secrets
  labels:
    name: hue-secrets
    template: dh-data-catalog
    app: hue
stringData:
  AWS_ACCESS_KEY_ID: "changeme"
  AWS_SECRET_ACCESS_KEY: "changeme"
---
apiVersion: v1
kind: Secret
metadata:
  name: mysqld-exporter
  labels:
    name: mysqld-exporter
    template: dh-data-catalog
    app: hue
stringData:
  DATA_SOURCE_NAME: "root:root@(localhost:3306)/"
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  name: "mysql"
  labels:
    template: dh-data-catalog
    app: hue
  annotations:
    template.alpha.openshift.io/wait-for-ready: 'true'
spec:
  strategy:
    type: Recreate
  triggers:
  - type: ImageChange
    imageChangeParams:
      automatic: true
      containerNames:
      - mysql
      from:
        kind: ImageStreamTag
        name: mysql:5.7
        namespace: openshift
      lastTriggeredImage: ''
  - type: ConfigChange
  replicas: 1
  selector:
    name: "mysql"
  template:
    metadata:
      labels:
        name: "mysql"
    spec:
      containers:
        - name: mysqld-exporter
          image: prom/mysqld-exporter
          ports:
            - containerPort: 9104
              protocol: TCP
          env:
            - name: DATA_SOURCE_NAME
              valueFrom:
                secretKeyRef:
                  name: "mysqld-exporter"
                  key: DATA_SOURCE_NAME
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9104
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9104
        - name: mysql
          image: "openshift/mysql:5.7"
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - '-i'
                - '-c'
                - >-
                  MYSQL_PWD=$MYSQL_PASSWORD mysql -h 127.0.0.1 -u $MYSQL_USER -D
                  $MYSQL_DATABASE -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: "mysql-secrets"
                key: database-user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "mysql-secrets"
                key: database-password
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: "mysql-secrets"
                key: database-name
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "mysql-secrets"
                key: database-root-password
          resources:
            limits:
              memory: "512Mi"
          volumeMounts:
          - name: "mysql"
            mountPath: "/var/lib/mysql/data"
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
      volumes:
      - name: "mysql"
        persistentVolumeClaim:
          claimName: "mysql"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
kind: Service
apiVersion: v1
metadata:
  name: "mysql"
  labels:
    template: dh-data-catalog
    app: hue
  annotations:
    template.openshift.io/expose-uri: 'mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mysql")].port}'
spec:
  ports:
  - name: mysql
    protocol: TCP
    port: 3306
    targetPort: 3306
  selector:
    name: "mysql"
  type: ClusterIP
  sessionAffinity: None
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  name: hue
  labels:
    name: hue-service
    template: dh-data-catalog
    app: hue
spec:
  selector:
    name: hue
  ports:
  - name: 8000-tcp
    port: 8000
    protocol: TCP
    targetPort: 8000
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "mysql"
  labels:
    template: dh-data-catalog
    app: hue
  annotations:
    volume.beta.kubernetes.io/storage-class: ''
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"
---
apiVersion: v1
kind: Route
metadata:
  name: hue
  labels:
    name: server-route
    template: dh-data-catalog
    app: hue
spec:
  port:
    targetPort: 8000-tcp
  tls:
    termination: edge
  to:
    kind: Service
    name: hue
    weight: 100
  wildcardPolicy: None
---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
  labels:
    template: dh-data-catalog
    name: db-init
    app: hue
spec:
  parallelism: 1
  completions: 1
  template:
    metadata:
      name: db-init
    spec:
      containers:
      - name: db-init
        image: shgriffi/hue:test
        command: ["build/env/bin/hue", "migrate"]
        imagePullPolicy: Always
        volumeMounts:
        - name: "hue-ini"
          mountPath: /hue/desktop/conf/
      volumes:
      - name: "hue-ini"
        configMap:
          name: hue-ini
      restartPolicy: OnFailure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hue-hive-site-xml
  labels:
    name: hue-hive-site-xml
    template: dh-data-catalog
    app: hue
data:
  hive-site.xml: |-
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
      <property>
        <name>hive.server2.transport.mode</name>
        <value>binary</value>
        <description>Server transport mode. binary or http.</description>
      </property>

      <property>
        <name>hive.server2.thrift.http.port</name>
        <value>{{ thriftserver_transport_port }}</value>
        <description>Port number when in HTTP mode.</description>
      </property>

      <property>
        <name>fs.s3a.awsAccessKeyId</name>
        <value>{{ AWS_ACCESS_KEY_ID }}</value>
      </property>

      <property>
        <name>fs.s3a.awsSecretAccessKey</name>
        <value>{{ AWS_SECRET_ACCESS_KEY }}</value>
      </property>

      <property>
        <name>fs.s3a.endpoint</name>
        <value>{{ S3_ENDPOINT }}</value>
      </property>
    </configuration>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hue-ini
  labels:
    name: hue-ini
    template: hue-server-template
    app: hue
data:
  hue.ini: |-
    [desktop]
      # Hide unused apps
      app_blacklist=impala,security,jobbrowser,jobsub,pig,hbase,sqoop,zookeeper,spark,oozie,search
      secret_key=8pyufhgwp08erughyp8swe7ru
      http_host=0.0.0.0
      http_port=8000
      is_hue_4=true
      time_zone=America/Los_Angeles
      django_debug_mode=false
      dev=false
      database_logging=false
      send_dbug_messages=false
      http_500_debug_mode=false

      [[django_admins]]

      [[custom]]

{% if use_ldap|default(false) %}
      [[auth]]
      backend=desktop.auth.backend.LdapBackend

      [[ldap]]
      ldap_url=ldaps://ldap.corp.redhat.com
      base_dn="ou=users,dc=redhat,dc=com"
      use_start_tls=true
        [[[users]]]
        user_name_attr="uid"

        [[[groups]]]

        [[[ldap_servers]]]
{% else %}
      [[auth]]

      [[ldap]]
        [[[users]]]

        [[[groups]]]

        [[[ldap_servers]]]
{% endif %}

      [[vcs]]

      [[database]]
        engine=django.db.backends.mysql
        host=mysql.dh-dev-analytics-factory.svc
        port=3306
        user=datacatalog
        password=datacatalog
        name=datacatalog

      [[session]]

      [[smtp]]
        host=localhost
        port=25
        user=
        password=
        tls=no

      [[kerberos]]

      [[oauth]]

      [[oidc]]

      [[metrics]]

    [notebook]
      [[interpreters]]
        [[[hive]]]
          name=Hive
          interface=hiveserver2

        [[[impala]]]
          name=Impala
          interface=hiveserver2

        [[[sparksql]]]
          name=SparkSql
          interface=hiveserver2

        [[[text]]]
          name=Text
          interface=text

        [[[markdown]]]
          name=Markdown
          interface=text

    [dashboard]
      is_enabled=true
      has_sql_enabled=true
      has_query_builder_enabled=true
      has_report_enabled=true

      [[engines]]
        [[[sql]]]
        analytics=true
        nesting=false

        [[[hive]]]
        analytics=true
        nesting=true

    [hadoop]
      [[hdfs_clusters]]
        [[[default]]]

      [[yarn_clusters]]
        [[[default]]]

    [beeswax]
      hive_server_host=thriftserver.dh-dev-analytics-factory.svc
      hive_server_port=10000
      auth_username=hue
      auth_password=password
      hive_conf_dir=/etc/hive/conf

      [[ssl]]

    [metastore]
      enable_new_create_table=true
      force_hs2_metadata=false

    [impala]
      [[ssl]]

    [spark]

    [oozie]

    [filebrowser]

    [pig]

    [sqoop]

    [proxy]

    [hbase]

    [search]

    [libsolr]

    [indexer]

    [jobsub]

    [jobbrowser]

    [security]

    [zookeeper]
      [[clusters]]
        [[[default]]]

    [useradmin]
      [[password_policy]]

    [liboozie]
      oozie_url=

    [aws]
      [[aws_accounts]]
        [[[default]]]
          access_key_id=changeme
          secret_access_key=changeme
          host=changeme
          is_secure=true
          calling_format=boto.s3.connection.OrdinaryCallingFormat
          allow_environment_credentials=true
          region="sa-east-1"

    [libsentry]

    [libzookeeper]

    [librdbms]
      [[databases]]

    [libsaml]

    [libopenid]

    [liboauth]

    [kafka]
      [[kafka]]

    [metadata]
      [[optimizer]]
      [[navigator]]
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  name: hue
  labels:
    template: dh-data-catalog
    app: hue
spec:
  template:
    metadata:
      labels:
        name: hue
        template: dh-data-catalog
    spec:
      containers:
        - name: hue
          image: shgriffi/hue:test
          command: ["build/env/bin/hue", "runcpserver"]
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 300m
              memory: 500Mi
            limits:
              cpu: 500m
              memory: 1Gi
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: hue-secrets
                key: AWS_ACCESS_KEY_ID
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: hue-secrets
                key: AWS_SECRET_ACCESS_KEY
          volumeMounts:
          - name: "hue-ini"
            mountPath: /hue/desktop/conf/
          - name: "hive-site-xml"
            mountPath: /etc/hive/conf/
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            periodSeconds: 30
            initialDelaySeconds: 300
            successThreshold: 1
            timeoutSeconds: 5
      restartPolicy: Always
      volumes:
      - name: "hue-ini"
        configMap:
          name: hue-ini
      - name: "hive-site-xml"
        configMap:
          name: hue-hive-site-xml
  replicas: 1
  triggers:
  - type: ConfigChange
  strategy:
    type: Rolling
